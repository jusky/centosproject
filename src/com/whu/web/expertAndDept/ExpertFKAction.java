/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.expertAndDept;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.tools.SystemConstant;
import com.whu.web.common.SystemShare;
import com.whu.web.eventbean.ExpertInfo;
import com.whu.web.eventbean.JDYJSBean;
import com.whu.web.role.RoleManageForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-14-2014
 * 
 * XDoclet definition:
 * @struts.action path="/expertFKAction" name="expertFKForm" parameter="method" scope="request" validate="true"
 */
public class ExpertFKAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward expertInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		ExpertFKForm expertFKForm = (ExpertFKForm) form;
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String sql = "select a.* from SYS_EXPERTINFO a, SYS_ED_USER b where b.LOGINNAME='" + loginName + "' and b.EXPERTID=a.ID";
		DBTools dbTools = new DBTools();
		ExpertInfo expertInfo = dbTools.queryExpertInfo(sql);
		ArrayList result = new ArrayList();
		if(expertInfo!=null)
		{
			result.add(expertInfo);
			expertFKForm.setRecordNotFind("false");
			expertFKForm.setRecordList(result);
			return mapping.findForward("expertInfo");
		}
		else
		{
			expertFKForm.setRecordNotFind("true");
			return mapping.findForward("initError");
		}
	}
	/**
	 * 查询待鉴定案件列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward eventList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ExpertFKForm expertFKForm = (ExpertFKForm)form;
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String sql = "select a.*, b.STATUS from TB_ED_ADVICE a, TB_REPORTINFO b where a.LOGINNAME='" + loginName + "' and a.REPORTID=b.REPORTID";
		DBTools db = new DBTools();
		ArrayList result = db.queryExpertJDList(sql);
		if(result.size() > 0)
		{
			ArrayList tempList = new ArrayList();
			for(int i = 0; i < result.size(); i++)
			{
				ExpertIdentityBean eb = (ExpertIdentityBean)result.get(i);
				String reportID = eb.getReportID();
				sql = "select * from TB_EXPERTFILE where REPORTID='" + reportID + "'";
				ExpertFile ef = db.queryExpertFile(sql);
				eb.setLetterPath(ef.getJdhPath());
				eb.setAdviceLetterPath(ef.getYjsPath());
				
				sql = "select * from TB_JDYJSINFO where REPORTID='" + reportID + "'";
				JDYJSBean jb = db.queryJDYJS(sql);
				if(jb!=null)
				{
					eb.setEventReason(jb.getEventReason());
					eb.setJdContent(jb.getIdentifyContent());
					eb.setWtDept(jb.getWtDept());
				}
				tempList.add(eb);
			}
			expertFKForm.setRecordNotFind("false");
			expertFKForm.setRecordList(tempList);
			request.setAttribute("totalRows",String.valueOf(result.size()));
		}
		else
		{
			expertFKForm.setRecordNotFind("true");
			request.setAttribute("totalRows",String.valueOf(0));
		}
		return mapping.findForward("expertJDList");
	}
	/**
	 * 跳转到在线提交鉴定结论页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward onlineSubmit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		ExpertFKForm expertFKForm = (ExpertFKForm)form;
		String id = request.getParameter("id");
		String reportID = request.getParameter("reportID");
		String adviceID = request.getParameter("adviceID");
		DBTools dbTools = new DBTools();
		String sql = "select a.*,b.CONCLUSION,b.ADVICE from TB_JDYJSINFO a,TB_EXPERTADVICE b where a.REPORTID='" + reportID + "' and b.ID=" + adviceID + " and a.REPORTID=b.REPORTID";
		JDYJSBean jb = dbTools.queryExpertFK(sql);
		int count = 0;
		if(jb != null)
		{
			
			String jdConclusion = jb.getJdConclusion();
			if(jdConclusion != null && !jdConclusion.equals(""))
			{
				String[] jdConArr = jdConclusion.split("\n");
				UrlAndName uan;
				String conclusion = jb.getConclusion();
				int n = jdConArr.length;
				String[] tempCon = new String[n];
				for(int i = 0; i < n; i++)
				{
					tempCon[i] = "不确定";
				}
				//如果专家已经提交过信息，那么应该把专家已经选择的鉴定结论“是”、“否”、“不确定”返回给用户，供用户编辑
				if(conclusion != null && !conclusion.equals(""))
				{
					tempCon = conclusion.split(",");
				}
				ArrayList tempList = new ArrayList();
				for(int i = 0; i < jdConArr.length; i++)
				{
					uan = new UrlAndName();
					uan.setId(String.valueOf(i));
					uan.setName(jdConArr[i]);
					uan.setIsCheck(tempCon[i]);
					tempList.add(uan);
					count++;
				}
				jb.setJdConclusionList(tempList);
			}
		}	
		
		request.setAttribute("jdID", id);
		request.setAttribute("reportID", reportID);
		request.setAttribute("adviceID", adviceID);
		request.setAttribute("jdConCount", String.valueOf(count));
		ArrayList resultList = new ArrayList();
		resultList.add(jb);
		expertFKForm.setRecordList(resultList);
		
		// if submit, cannot edit separate in expertAdviceFk.jsp
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String isSubmit = dbTools.querySingleDate("TB_ED_ADVICE", "ISSUBMIT", "LOGINNAME", loginName);
		request.setAttribute("isSubmit", "1");
		
		return mapping.findForward("onlineSubmit");
	}
	/**
	 * 鉴定专家在线提交鉴定意见和鉴定结论
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public ActionForward submitAdvice(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		ExpertFKForm expertFKForm = (ExpertFKForm)form;
		String id = expertFKForm.getJdID();
		String reportID = expertFKForm.getReportID();
		String adviceID = expertFKForm.getAdviceID();
		String jdConCount = expertFKForm.getJdConCount();
		String jdAdvice = expertFKForm.getJdAdvice();
		int count = Integer.valueOf(jdConCount);
		String tempName = "";
		String jdConclusion = "";
		if(count > 0)
		{
			for(int i = 0; i < count; i++)
			{
				tempName = request.getParameter("conclusion" + String.valueOf(i));
				jdConclusion += tempName + ",";
			}
		}
		if(!jdConclusion.equals(""))
		{
			jdConclusion = jdConclusion.substring(0, jdConclusion.length() - 1);
		}
		
		DBTools dbTools = new DBTools();
		boolean result = false;
		String expertName = dbTools.querySingleDate("TB_EXPERTADVICE", "EXPERTNAME", "ID", adviceID);
		//上传附件
		String fileName = "";
		String attachName = "";
		
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		
		String filePath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
		//String path1 = filePath + "temp";
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String path1 = request.getSession().getServletContext().getRealPath("/") + "/temp/" + loginName + "/";
		String path2 = filePath + reportID;
		//获得服务器的IP地址路径，存放在数据库中，便于下载
		String relDirectory = "attachment" + "/" + reportID;
		//将临时文件夹中的附件转存到以警情编号为目录的文件夹下
		SystemShare.IOCopy(path1, path2, relDirectory, expertName);
		
		attachName =  (String)request.getSession().getAttribute("AdviceFKAttach");
		if(attachName != null && !attachName.equals(""))
		{
			attachName = reportID + "/" + attachName;
			request.getSession().setAttribute("AdviceFKAttach","");
		}
		else
		{
			attachName = "";
		}

        String sql = "update TB_EXPERTADVICE set CONCLUSION='" + jdConclusion + "',ADVICE='" + jdAdvice + "',TIME='" + time + "',ISFK='1',ATTACHNAME='" + attachName + "' where ID=" + adviceID;
        result = dbTools.insertItem(sql);
        
        if(result)
        {
        	String describe = time + ", " + expertName + "   在线提交专家鉴定意见";
			//插入处理过程到数据库中
			result = dbTools.InsertHandleProcess(reportID, expertName, SystemConstant.HP_EXPERTADVICE, SystemConstant.SS_SURVEYING, SystemConstant.LCT_ZJJD, describe);
			
        	//将该反馈消息插入到数据库中，便于在管理平台首页可以查看到该反馈消息，提醒工作人员
        	sql = "insert into TB_FKRECODER(REPORTID, TIME,TYPE,FKNAME) values('" + reportID + "','" + time + "','" + SystemConstant.REPLY_EXPERT + "','" + expertName + "')";
        	dbTools.insertItem(sql);
        }

        if(result)
        {
			sql = "update TB_ED_ADVICE set ISSUBMIT='1' where ID=" +id;
			result = dbTools.insertItem(sql);
        }
        PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "提交成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "提交失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
}