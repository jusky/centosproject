/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.expertAndDept;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.DBTools;
import com.whu.tools.SystemConstant;
import com.whu.web.common.SystemShare;
import com.whu.web.eventbean.JDYJSBean;

/** 
 * MyEclipse Struts
 * Creation date: 05-21-2014
 * 
 * XDoclet definition:
 * @struts.action path="/deptFKAction" name="deptFKForm" parameter="method" scope="request" validate="true"
 */
public class DeptFKAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	public ActionForward eventList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DeptFKForm deptFKForm = (DeptFKForm)form;
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String sql = "select a.ID,a.REPORTID,a.ISSUBMIT,a.ADVICEID,b.TITLE,b.DEPTNAME,b.SHORTINFO,b.FKTIME,b.SURVEYCONTENT,b.FILEPATH,c.STATUS from TB_ED_ADVICE a, TB_DEPTSURVEYLETTER b, TB_REPORTINFO c where a.ADVICEID=b.DEPTADVICEID and a.LOGINNAME='" + loginName + "' and a.REPORTID=c.REPORTID";
		DBTools db = new DBTools();
		ArrayList result = db.queryDeptDCList(sql);
		if(result.size() > 0)
		{
			deptFKForm.setRecordNotFind("false");
			deptFKForm.setRecordList(result);
			request.setAttribute("totalRows",String.valueOf(result.size()));
		}
		else
		{
			deptFKForm.setRecordNotFind("true");
			request.setAttribute("totalRows",String.valueOf(0));
		}
		return mapping.findForward("deptDCList");
	}
	/**
	 * 跳转到在线提交调查结论页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward onlineSubmit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DeptFKForm deptFKForm = (DeptFKForm)form;
		String id = request.getParameter("id");
		String reportID = request.getParameter("reportID");
		String adviceID = request.getParameter("adviceID");
		DBTools dbTools = new DBTools();
		//String sql = "select a.*,b.TITLE from TB_ED_ADVICE a,TB_DEPTSURVEYLETTER where a.ID=" + id + " and a.ADVICEID=b.DEPTADVICEID";
		
		String title = dbTools.querySingleDate("TB_DEPTSURVEYLETTER", "TITLE", "DEPTADVICEID", adviceID);
		request.setAttribute("title", title);
		
		String sql = "select a.ADVICE,a.EXPERTADVICE,b.LITIGANTNAME,b.LITIGANTTIME,b.LITIGANTCONTENT from TB_DEPTADVICE a, TB_LITIGANTSTATE b where a.ID=b.DEPTADVICEID and a.ID=" + adviceID;
		DeptAdviceBean dab = dbTools.queryDeptAdvice(sql);
		ArrayList result = new ArrayList();
		if(dab==null)
		{
			dab = new DeptAdviceBean();
			dab.setDeptAdvice("");
			dab.setLitigantName("");
			dab.setAttitude("");
			dab.setLitigantTime("");
			dab.setExpertAdvice("");
		}
		result.add(dab);
		deptFKForm.setRecordList(result);

		request.setAttribute("dcID", id);
		request.setAttribute("reportID", reportID);
		request.setAttribute("adviceID", adviceID);
		
		// if submit, cannot edit separate in deptAdviceFk.jsp
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String isSubmit = dbTools.querySingleDate("TB_ED_ADVICE", "ISSUBMIT", "LOGINNAME", loginName);
		request.setAttribute("isSubmit", "1");
		
		return mapping.findForward("onlineSubmit");
	}
	/**
	 * 鉴定专家在线提交鉴定意见和鉴定结论
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public ActionForward submitAdvice(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DeptFKForm deptFKForm = (DeptFKForm)form;
		String id = deptFKForm.getDcID();
		String reportID = deptFKForm.getReportID();
		String adviceID = deptFKForm.getAdviceID();
		String deptAdvice = deptFKForm.getDeptAdvice();
		String litigantName = deptFKForm.getLitigantName();
		String attitude = deptFKForm.getAttitude();
		String litigantTime = deptFKForm.getLitigantTime();
		String expertAdvice = deptFKForm.getExpertAdvice();
		//上传附件
		String fileName = "";
		String attachName = "";
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		
		String filePath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
		//String path1 = filePath + "temp";
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String userName = (String)request.getSession().getAttribute("UserName");
		String path1 = request.getSession().getServletContext().getRealPath("/") + "/temp/" + loginName + "/";
		String path2 = filePath + reportID;
		//获得服务器的IP地址路径，存放在数据库中，便于下载
		String relDirectory = "attachment" + "/" + reportID;
		//将临时文件夹中的附件转存到以警情编号为目录的文件夹下
		SystemShare.IOCopy(path1, path2, relDirectory, userName);
		
		attachName =  (String)request.getSession().getAttribute("AdviceFKAttach");
		if(attachName != null && !attachName.equals(""))
		{
			attachName = reportID + "/" + attachName;
			request.getSession().setAttribute("AdviceFKAttach","");
		}
		else
		{
			attachName = "";
		}

		DBTools dbTools = new DBTools();
		String tempsql="select ID from TB_LITIGANTSTATE where DEPTADVICEID='" + adviceID + "'";
      String sql = "update TB_DEPTADVICE set ADVICE='" + deptAdvice + "',TIME='" + time + "',ISFK='1',ATTACHNAME='" + attachName + "',EXPERTADVICE='" + expertAdvice + "' where ID='" + adviceID + "'";
      boolean result = dbTools.insertItem(sql);
        
      if(result)
        {
        	String describe = time + "," + userName + "在线提交该单位的调查意见";
			//插入处理过程到数据库中
			result = dbTools.InsertHandleProcess(reportID, userName, SystemConstant.HP_DEPTADVICE, SystemConstant.SS_SURVEYING, SystemConstant.LCT_DWDC, describe);
			
        	//将该反馈消息插入到数据库中，便于在管理平台首页可以查看到该反馈消息，提醒工作人员
        	sql = "insert into TB_FKRECODER(REPORTID, TIME,TYPE,FKNAME) values('" + reportID + "','" + time + "','" + SystemConstant.REPLY_DEPT + "','" + userName + "')";
        	dbTools.insertItem(sql);
        }
        
      if(result)
        {
        	//sql = "if not exists(select ID from TB_LITIGANTSTATE where DEPTADVICEID='" + adviceID + "') insert into TB_LITIGANTSTATE(REPORTID,LITIGANTNAME,LITIGANTTIME,LITIGANTCONTENT,DEPTADVICEID) values('" + reportID + "','" + litigantName + "','" + litigantTime + "','" + attitude + "','" + adviceID + "') else update TB_LITIGANTSTATE set LITIGANTNAME='" + litigantName + "', LITIGANTTIME='" + litigantTime + "',LITIGANTCONTENT='" + attitude +  "' where DEPTADVICEID='" + adviceID + "'";
    	   boolean flag=dbTools.queryISEXIST(tempsql);
    	   if(flag)
    	   {
    		   sql="insert into TB_LITIGANTSTATE(REPORTID,LITIGANTNAME,LITIGANTTIME,LITIGANTCONTENT,DEPTADVICEID) values('" + reportID + "','" + litigantName + "','" + litigantTime + "','" + attitude + "','" + adviceID + "')";
    	   }
    	   else
    	   {
    		   sql="update TB_LITIGANTSTATE set LITIGANTNAME='" + litigantName + "', LITIGANTTIME='" + litigantTime + "',LITIGANTCONTENT='" + attitude +  "' where DEPTADVICEID='" + adviceID + "'";
    	   }
    	  result = dbTools.insertItem(sql);
        }

        if(result)
        {
			sql = "update TB_ED_ADVICE set ISSUBMIT='1' where ID=" +id;
			result = dbTools.insertItem(sql);
        }
        PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "提交成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "提交失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
}