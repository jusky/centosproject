/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.wsjb;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.tools.DebugLog;
import com.whu.tools.ExcelTools;
import com.whu.tools.SystemConstant;
import com.whu.tools.crypto.AESCrypto;
import com.whu.web.common.SystemShare;
import com.whu.web.event.BeReportBean;
import com.whu.web.event.EventBean;
import com.whu.web.log.LogBean;

/** 
 * MyEclipse Struts
 * Creation date: 12-17-2013
 * 
 * XDoclet definition:
 * @struts.action path="/wsjbManageAction" name="wsjbManageForm" parameter="method" scope="request" validate="true"
 */
public class WsjbManageAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * 初始化网上举报信息列表
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		WsjbManageForm wsjbManageForm = (WsjbManageForm) form;
		CheckPage pageBean = new CheckPage();
		int queryPageNo = 1;// 
		int rowsPerPage = 20;// 
		pageBean.setRowsPerPage(rowsPerPage);
		if (request.getParameter("queryPageNo") != null && request.getParameter("queryPageNo") != "") {
			queryPageNo = Integer.parseInt(request.getParameter("queryPageNo"));
		}
		pageBean.setQueryPageNo(queryPageNo);
		String sql = "select a.ID,a.REPORTID,a.REPORTNAME,a.BEREPORTNAME,a.BEDEPT,a.JBSY2,a.TIME from TB_REPORTINFO a where a.ISRECV = '0' order by ID desc";
		String[] params = new String[0];
		request.getSession().setAttribute("queryWsjbSql", sql);
		request.getSession().setAttribute("queryWsjbParams", params);
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		WsjbDBTools db = new WsjbDBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryWsjbList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			wsjbManageForm.setRecordNotFind("false");
			wsjbManageForm.setRecordList(result);
			
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			wsjbManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward("init");
	}
	
	/**
	 * 查询和分页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward queryMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		WsjbManageForm wsjbManageForm = (WsjbManageForm) form;
		String operation = request.getParameter("operation");

		CheckPage pageBean = new CheckPage();
		String sql = "";
		String[] params = new String[0];
		int queryPageNo = 1;
		int rowsPerPage = 20;
		pageBean.setRowsPerPage(rowsPerPage);

		if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
			String IsNi = request.getParameter("isNi");
			
			String reportName = wsjbManageForm.getReportName();
			String beReportName = wsjbManageForm.getBeReportName();
			String jbBeginTime = wsjbManageForm.getJbBeginTime();
			String jbEndTime = wsjbManageForm.getJbEndTime();
			String temp = "";
			ArrayList<String> paramList = new ArrayList<String>();
			AESCrypto aes = new AESCrypto();
			String key = "TB_REPORTINFO";
			//String test=SystemShare.getHexString(aes.createEncryptor("匿名举报", key));
			//System.out.println(test);
			if(IsNi != null)//匿名举报，勾选了复选框
			{
				//temp += " and 1=dbo.compare_image1(a.REPORTNAME,0x" + SystemShare.getHexString(aes.createEncryptor("匿名举报", key)) + ") ";
				temp += " and hex(a.REPORTNAME) = '"+ SystemShare.getHexString(aes.createEncryptor("匿名举报", key))+"'";
			}
			else if(!reportName.equals(""))
			{
				//调用sqlserver自定义函数比较加密后的数据是否相等。
				//compare_image1为比较函数，共两个参数，第一个为字段名称，第二个字段为加密后的数据（注意加密后为字节数据，需要转换为十六进制字符串，另在前面加上0x）
				//temp += " and 1=dbo.compare_image1(a.REPORTNAME,0x" + SystemShare.getHexString(aes.createEncryptor(reportName, key)) + ") ";
				temp += " and hex(a.REPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor(reportName, key))+"'";
			}
			if(!beReportName.equals(""))
			{
				//temp += " and 1=dbo.compare_image1(a.BEREPORTNAME,0x" + SystemShare.getHexString(aes.createEncryptor(beReportName, key)) + ") ";
				temp += " and hex(a.BEREPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor(beReportName, key))+"'";
			}
			if(!jbBeginTime.equals(""))
			{
				temp += " and a.TIME >= ?";
				paramList.add(jbBeginTime);
			}
			if(!jbEndTime.equals(""))
			{
				temp += " and a.TIME <= ?";
				paramList.add(jbEndTime);
			}
			params = paramList.toArray(new String[0]);
			sql = "select a.ID,a.REPORTID,a.REPORTNAME,a.BEREPORTNAME,a.BEDEPT,a.JBSY2,a.TIME from TB_REPORTINFO a where a.ISRECV = '0' " + temp + "  order by ID desc";
			request.getSession().setAttribute("queryWsjbSql", sql);
			request.getSession().setAttribute("queryWsjbParams", params);
		}
		
		else if(operation.equalsIgnoreCase("changePage")){
			sql = (String)request.getSession().getAttribute("queryWsjbSql");
			params = (String[])request.getSession().getAttribute("queryWsjbParams");
			if (request.getParameter("currentPage") != null && request.getParameter("currentPage") != "") {
				queryPageNo = Integer.parseInt(request.getParameter("currentPage"));
			}
		}
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		pageBean.setQueryPageNo(queryPageNo);
		WsjbDBTools db = new WsjbDBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryWsjbList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			wsjbManageForm.setRecordNotFind("false");
			wsjbManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			wsjbManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward("init");
	}
	/**
	 * 删除网上举报信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		
		String ids = request.getParameter("ids");
		WsjbDBTools dbTool = new WsjbDBTools();
		boolean result = true;
		if(ids == null || ids == "")
		{
			String id = request.getParameter("id");
			result = dbTool.deleteItem(id, "TB_REPORTINFO");
		}
		else
		{
			String[] arrID = ids.split(",");
			result = dbTool.deleteItems(arrID, "TB_REPORTINFO");
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "删除成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "删除失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
	/**
	 * 不受理在网上举报的案件，将案件入库，但是状态设置为“未受理”
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward unrecv(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		boolean result = GyMethod(id,  SystemConstant.SS_UNRECVEVENT, request);

		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "不受理案件成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "不受理案件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
	/**
	 * 受理或者不受理案件的公用方法
	 * @param id
	 * @param status
	 * @param request
	 * @return
	 */
	public boolean GyMethod(String id, String status, HttpServletRequest request)
	{
		String createName = (String)request.getSession().getAttribute("UserName");
		boolean result = false;
		WsjbDBTools dbTool = new WsjbDBTools();
		WsjbInfo wsjbInfo = dbTool.QueryWsjbInfo(id);
		
		DBTools db = new DBTools(); 
		ArrayList list = new ArrayList();
		BeReportBean brb = new BeReportBean();
		brb.setReportID(wsjbInfo.getReportID());
		brb.setBeName(wsjbInfo.getBeReportName());
		brb.setBePosition(wsjbInfo.getBePosition());
		brb.setBeTelPhone(wsjbInfo.getBePhone());
		brb.setBeDept(wsjbInfo.getBeDept());
		list.add(brb);
		try {
			//插入被举报人信息
			result = db.insertBeReport(list);
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		String createTime = SystemShare.GetNowTime("yyyy-MM-dd");
		
		EventBean eb = new EventBean();
		eb.setReportID(wsjbInfo.getReportID());
		String sql = "";
		//受理的案件自动分配编号，不受理的案件不分配编号
		if(status.equals(SystemConstant.SS_RECVEVENT))
		{
			sql = "select SERIALNUM from TB_REPORTINFO where STATUS<>? order by ID desc limit 1";
			eb.setSerialNum(SystemShare.GetSerialNum(sql, new String[]{SystemConstant.SS_UNRECVEVENT}));
		}
		else
		{
			eb.setSerialNum("");
		}
		eb.setReportName(wsjbInfo.getReportName());
		eb.setDept(wsjbInfo.getDept());
		eb.setGdPhone(wsjbInfo.getGdPhone());
		eb.setTelPhone(wsjbInfo.getTelPhone());
		eb.setMailAddress(wsjbInfo.getMailAddres());
		eb.setReportTime(wsjbInfo.getTime());
		eb.setReportType("网络举报");
		eb.setCreateTime(createTime);
		eb.setCreateName(createName);
		//eb.setReportReason(wsjbInfo.getJbsy1() + "---" + wsjbInfo.getJbsy2());
		eb.setReportReason(wsjbInfo.getJbsy2());
		eb.setReportContent(wsjbInfo.getDetail());
		eb.setStatus(status);
		eb.setBeReportName(wsjbInfo.getBeReportName());
		eb.setIsDelete("0");
		eb.setIsNI(wsjbInfo.getIsNi());
		eb.setSearchID(wsjbInfo.getSearchID());
		
		//将举报者上传的附件转存到系统附件目录下
		String attachPath = wsjbInfo.getAttachPath();
		if(!attachPath.equals("无"))
		{
			String fileName = attachPath.substring(attachPath.lastIndexOf("/") + 1);
			String filePath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
			String path = filePath + wsjbInfo.getReportID() + "/";
			String serverPath = SystemConstant.GetServerPath() + "/" + "attachment" + "/" + wsjbInfo.getReportID() + "/" + fileName;
			//result = SystemShare.IOCopyFile(attachPath, path, createName);
			//System.out.println(attachPath);
			//System.out.println(fileName);
			//System.out.println(filePath);
			//System.out.println(path);
			//System.out.println(serverPath);
			result = SystemShare.DownloadFile(attachPath, path, fileName, serverPath, createName);
			if(result)
			{
				eb.setAccessory(wsjbInfo.getReportID() + "/" + fileName);
			}
		}
		//插入举报信息10
		result = db.InsertReportInfo(eb);
		
		if(result)
		{
			String describe = wsjbInfo.getTime() + "," + wsjbInfo.getReportName() + "在监督委员会门户网站在线举报" + wsjbInfo.getBeReportName() + ",举报事由为：" + wsjbInfo.getJbsy2();
			db.InsertHandleProcess(wsjbInfo.getReportID(), wsjbInfo.getReportName(), SystemConstant.HP_REPORT, SystemConstant.SS_RECVEVENT, SystemConstant.LCT_JB, describe);
			
			describe = createTime + "," + createName + "接受录入在线举报," + wsjbInfo.getReportName() + "举报" + wsjbInfo.getBeReportName();
			//插入处理过程到数据库中
			db.InsertHandleProcess(wsjbInfo.getReportID(), createName, SystemConstant.HP_RECVEVENT, SystemConstant.SS_RECVEVENT, SystemConstant.LCT_SLJB, describe);
			
			//更新前台数据库中事件的接收状态
			sql = "update TB_REPORTINFO set ISRECV='1' where ID=?";
			result = dbTool.UpdateItem(sql, new String[]{id});
			//更新反馈内容
			String sqlStr = "insert into TB_FKINFO(SEARCHID, FKCONTENT,FKTIME) values(?, ?, ?)" ;
			String[] params = new String[]{wsjbInfo.getSearchID(), SystemConstant.FK_RECVEVENT, createTime};
			result = dbTool.UpdateItem(sqlStr, params);
			dbTool.closeConnection();

			LogBean lb = new LogBean();
			lb.setOperator(createName);
			lb.setLogType(SystemConstant.LOG_RECV);
			lb.setIpAddr(request.getRemoteAddr());
			lb.setDetail("接收网上举报事件，事件编号为：" + wsjbInfo.getReportID());
			result = db.insertLogInfo(lb);
		}
		
		return result;
	}
	/**
	 * 接收网上举报信息到管理平台
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward recv(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		boolean result = GyMethod(id,  SystemConstant.SS_RECVEVENT, request);

		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "接收网上举报成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "接收网上举报失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
	/**
	 * 查看网上举报详细信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward detail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		
		WsjbManageForm wsjbManageForm = (WsjbManageForm) form;
		
		String id = request.getParameter("id");
		WsjbDBTools dbTool = new WsjbDBTools();
		WsjbInfo wsjbInfo = dbTool.QueryWsjbInfo(id);
		
		ArrayList list = new ArrayList();
		list.add(wsjbInfo);
		wsjbManageForm.setRecordNotFind("false");
		wsjbManageForm.setRecordList(list);
		
		return mapping.findForward("detail");
	}
	/**
	 * 导出列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward export(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		WsjbDBTools db = new WsjbDBTools();
		String sql = (String)request.getSession().getAttribute("queryWsjbSql");
		String[] params = (String[])request.getSession().getAttribute("queryWsjbParams");
		try
		{
			String fname = "event";
			OutputStream os = response.getOutputStream();
			response.reset();
			response.setHeader("Content-disposition", "attachment;filename=" + fname + ".xls");
			response.setContentType("application/msexcel");
			ResultSet rs = db.queryRsList(sql, params);
			rs.last();
			int length = rs.getRow();
			rs.beforeFirst();
			ArrayList result = db.queryWsjbList(rs, length);
			ExcelTools et = new ExcelTools();
			//et.createSheet(rs, os);
			String sheetName = "网上举报汇总表";
			ArrayList titleList = new ArrayList();
			titleList.add("编号");
			titleList.add("举报人姓名");
			titleList.add("被举报人姓名");
			titleList.add("举报事由");
			titleList.add("举报时间");
			titleList.add("状态");
			et.createEventSheet(result, os, sheetName, 1, titleList);
			rs.close();
		}
		catch(Exception e)
		{
			DebugLog.WriteDebug(e);
		}
		return null;
	}

}